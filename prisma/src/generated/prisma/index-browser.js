
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DealershipInfoScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  website: 'website',
  socialMedia: 'socialMedia',
  logoUrl: 'logoUrl',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  workingHourId: 'workingHourId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerkUserId: 'clerkUserId',
  email: 'email',
  name: 'name',
  imageUrl: 'imageUrl',
  phone: 'phone',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSavedVehicleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  vehicleId: 'vehicleId',
  savedAt: 'savedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  category: 'category',
  carType: 'carType',
  motorcycleType: 'motorcycleType',
  carBrand: 'carBrand',
  motorcycleBrand: 'motorcycleBrand',
  model: 'model',
  year: 'year',
  price: 'price',
  color: 'color',
  featured: 'featured',
  seats: 'seats',
  doors: 'doors',
  engineSize: 'engineSize',
  mileage: 'mileage',
  fuelType: 'fuelType',
  transmission: 'transmission',
  description: 'description',
  images: 'images',
  optinals: 'optinals',
  carStatus: 'carStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VisitBookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dealershipInfoId: 'dealershipInfoId',
  visitDate: 'visitDate',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  vehicleId: 'vehicleId'
};

exports.Prisma.WorkingHourScalarFieldEnum = {
  id: 'id',
  dealershipInfoId: 'dealershipInfoId',
  dayOfWeek: 'dayOfWeek',
  isOpen: 'isOpen',
  openTime: 'openTime',
  closeTime: 'closeTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.VehicleCategory = exports.$Enums.VehicleCategory = {
  car: 'car',
  motorcycle: 'motorcycle'
};

exports.CarType = exports.$Enums.CarType = {
  hatch: 'hatch',
  sedan: 'sedan',
  suv: 'suv',
  crossover: 'crossover',
  pickup: 'pickup',
  wagon: 'wagon',
  convertible: 'convertible',
  coupe: 'coupe',
  minivan: 'minivan',
  van: 'van',
  utility: 'utility'
};

exports.MotorcycleType = exports.$Enums.MotorcycleType = {
  street: 'street',
  sport: 'sport',
  touring: 'touring',
  scooter: 'scooter',
  trail: 'trail',
  custom: 'custom',
  offroad: 'offroad',
  naked: 'naked'
};

exports.CarBrand = exports.$Enums.CarBrand = {
  AUDI: 'AUDI',
  BMW: 'BMW',
  BYD: 'BYD',
  CAOA_CHERY: 'CAOA_CHERY',
  CHEVROLET: 'CHEVROLET',
  CHRYSLER: 'CHRYSLER',
  CITROEN: 'CITROEN',
  FIAT: 'FIAT',
  FORD: 'FORD',
  GREAT_WALL: 'GREAT_WALL',
  HONDA: 'HONDA',
  HYUNDAI: 'HYUNDAI',
  JAC: 'JAC',
  JAGUAR: 'JAGUAR',
  JEEP: 'JEEP',
  KIA: 'KIA',
  LAND_ROVER: 'LAND_ROVER',
  LEXUS: 'LEXUS',
  MERCEDES_BENZ: 'MERCEDES_BENZ',
  MINI: 'MINI',
  MITSUBISHI: 'MITSUBISHI',
  NISSAN: 'NISSAN',
  PEUGEOT: 'PEUGEOT',
  PORSCHE: 'PORSCHE',
  RAM: 'RAM',
  RENAULT: 'RENAULT',
  SUBARU: 'SUBARU',
  SUZUKI: 'SUZUKI',
  TOYOTA: 'TOYOTA',
  VOLKSWAGEN: 'VOLKSWAGEN',
  VOLVO: 'VOLVO'
};

exports.MotorcycleBrand = exports.$Enums.MotorcycleBrand = {
  APRILIA: 'APRILIA',
  BENELLI: 'BENELLI',
  BMW: 'BMW',
  BROS: 'BROS',
  CABALLERO: 'CABALLERO',
  CALOI: 'CALOI',
  CAN_AM: 'CAN_AM',
  CF_MOTO: 'CF_MOTO',
  DAFRA: 'DAFRA',
  DUCATI: 'DUCATI',
  GAS_GAS: 'GAS_GAS',
  HARLEY_DAVIDSON: 'HARLEY_DAVIDSON',
  HONDA: 'HONDA',
  HUSQVARNA: 'HUSQVARNA',
  INDIAN: 'INDIAN',
  KAWASAKI: 'KAWASAKI',
  KTM: 'KTM',
  KYMCO: 'KYMCO',
  MOTO_GUZZI: 'MOTO_GUZZI',
  PIAGGIO: 'PIAGGIO',
  ROYAL_ENFIELD: 'ROYAL_ENFIELD',
  SHINERAY: 'SHINERAY',
  SUZUKI: 'SUZUKI',
  TRIUMPH: 'TRIUMPH',
  VESPA: 'VESPA',
  YAMAHA: 'YAMAHA',
  ZERO: 'ZERO'
};

exports.CarFuelType = exports.$Enums.CarFuelType = {
  gasoline: 'gasoline',
  alchool: 'alchool',
  flex: 'flex',
  diesel: 'diesel',
  electric: 'electric',
  hibrid: 'hibrid'
};

exports.CatTransmissionType = exports.$Enums.CatTransmissionType = {
  manual: 'manual',
  automatic: 'automatic',
  semiAutomatic: 'semiAutomatic',
  cvt: 'cvt',
  automatized: 'automatized',
  dct: 'dct'
};

exports.CarStatus = exports.$Enums.CarStatus = {
  available: 'available',
  sold: 'sold',
  reserved: 'reserved'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  NO_SHOW: 'NO_SHOW'
};

exports.DayOfWeek = exports.$Enums.DayOfWeek = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.Prisma.ModelName = {
  DealershipInfo: 'DealershipInfo',
  User: 'User',
  UserSavedVehicle: 'UserSavedVehicle',
  Vehicle: 'Vehicle',
  VisitBooking: 'VisitBooking',
  WorkingHour: 'WorkingHour'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
